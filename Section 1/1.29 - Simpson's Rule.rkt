#lang sicp

(define (cube x) (* x x x))
(define (sum a b term next)
  (if (> a b)
      0
      (+ (term a)
         (sum (next a) b term next)))
  )

(define (integral f a b dx)
  (define (next x)
    (+ x dx))
  (* dx (sum a b f next))
  )
(define (simpsons-integral f a b n)
  (define h (/ (- b a) n))
  (define (y k) (f (+ a (* k h))))
  (define (term k)
    (cond ((or (= k 0) (= k n)) (y k))
          ((even? k) (* 2 (y k)))
          (else (* 4 (y k )))
          )
    )
  (define (next k)
    (+ k 1))
  (* (/ h 3) (sum 0 n term next))
  )
(display "With Simpson's Rule:")
(newline)
(display " N =  100: ") (display (simpsons-integral cube 0.0 1.0 100.0))
(newline)
(display " N = 1000: ")(display (simpsons-integral cube 0.0 1.0 1000.0))
(newline)
(display "Regular Integral:")
(newline)
(display "dx =  0.1:") (display (integral cube 0 1 0.1))
(newline)
(display "dx = 0.01:") (display (integral cube 0 1 0.01))
